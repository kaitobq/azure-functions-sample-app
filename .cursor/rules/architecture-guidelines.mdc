---
description:
globs:
alwaysApply: true
---
# プロジェクト構造ルール

## 基本方針
- ビジネスドメインの関心を中心に据えた構造
- 実装の詳細は各ドメイン内に閉じる
- 関連するコードは近い位置に配置する

## ディレクトリ構造
```
src/
  ├── config/     # アプリケーション設定
  ├── functions/  # Azure Functionsのエントリーポイント
  ├── models/     # ドメインモデル + DB操作
  └── services/   # ビジネスロジック
```

## 各ディレクトリの責務

### config/
- アプリケーション全体の設定
- 環境変数の管理
- 外部サービスとの接続設定

### functions/
- Azure Functionsのエンドポイント定義
- HTTPリクエストのバリデーション
- エラーハンドリング

### models/
- ドメインモデルの定義
- DB操作の実装
- 関連する型定義
- バリデーションロジック

### services/
- ビジネスロジックの実装
- 複数のモデルを組み合わせた処理
- トランザクション管理
- 外部サービスとの連携
- レスポンスの整形

## コーディングルール

### ファイル命名規則
- クラス名とファイル名は一致させる
- ファイル名はキャメルケースを使用
- テストファイルは `.test.ts` または `.spec.ts` のサフィックスを付ける

### コードの配置
- 関連するコードは同じファイル内に配置する
- 型定義は使用する場所の近くに配置する
- ユーティリティ関数は使用するドメイン内に配置する

### 依存関係
- 依存関係は一方向に流れるようにする
  - functions → services → models
- 循環依存を避ける
- 外部ライブラリへの依存は最小限に抑える

## テスト
- 各ドメイン内にテストファイルを配置する
- テストは実装の詳細ではなく、振る舞いに焦点を当てる
- モックは必要な場合のみ使用する

## ドキュメント
- 複雑なロジックにはコメントを付ける
- 型定義にはJSDocコメントを付ける
